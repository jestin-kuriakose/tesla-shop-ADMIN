const { screen, render, fireEvent } = require("@testing-library/react")
import Register from "../Register"

describe("Register", () => {

    test("Input elements should be empty", () => {
        render(<Register/>)
        const firstNameElement = screen.getByPlaceholderText(/first name/i)
        const lastNameElement = screen.getByPlaceholderText(/last name/i)
        const emailElement = screen.getByPlaceholderText(/email/i)
        const passwordElement = screen.getByPlaceholderText(/password/i)
        expect(firstNameElement.value).toBe("")
        expect(lastNameElement.value).toBe("")
        expect(emailElement.value).toBe("")
        expect(passwordElement.value).toBe("")
    })

    test("Input elements value changes", () => {
        render(<Register/>)
        const firstNameElement = screen.getByPlaceholderText(/first name/i)
        const lastNameElement = screen.getByPlaceholderText(/last name/i)
        const emailElement = screen.getByPlaceholderText(/email/i)
        const passwordElement = screen.getByPlaceholderText(/password/i)
        fireEvent.change(firstNameElement, { target: { value: "jestin" }})
        fireEvent.change(lastNameElement, { target: { value: "kuriakose" }})
        fireEvent.change(emailElement, { target: { value: "jestink@live.com" }})
        fireEvent.change(passwordElement, { target: { value: "pass" }})
        expect(firstNameElement.value).toBe("jestin")
        expect(lastNameElement.value).toBe("kuriakose")
        expect(emailElement.value).toBe("jestink@live.com")
        expect(passwordElement.value).toBe("pass")
    })

    test("Alert box shows error message", async () => {
        render(<Register/>)
        const firstNameElement = screen.getByPlaceholderText(/first name/i)
        const lastNameElement = screen.getByPlaceholderText(/last name/i)
        const emailElement = screen.getByPlaceholderText(/email/i)
        const passwordElement = screen.getByPlaceholderText(/password/i)
        const registerButton = screen.getByRole("button", { name: "Register" })
        fireEvent.change(firstNameElement, { target: { value: "jestin" }})
        fireEvent.change(lastNameElement, { target: { value: "kuriakose" }})
        fireEvent.change(emailElement, { target: { value: "jestink@live.com" }})
        fireEvent.change(passwordElement, { target: { value: "pass" }})
        fireEvent.click(registerButton)
        const alertEle = await screen.findByRole("alert")
        expect(alertEle).toHaveTextContent(/User Exist, use a different email/i)
    })

    test("Alert box shows success message", async () => {
        render(<Register/>)
        const firstNameElement = screen.getByPlaceholderText(/first name/i)
        const lastNameElement = screen.getByPlaceholderText(/last name/i)
        const emailElement = screen.getByPlaceholderText(/email/i)
        const passwordElement = screen.getByPlaceholderText(/password/i)
        const registerButton = screen.getByRole("button", { name: "Register" })
        fireEvent.change(firstNameElement, { target: { value: "jestin" }})
        fireEvent.change(lastNameElement, { target: { value: "kuriakose" }})
        fireEvent.change(emailElement, { target: { value: "jestin@live.com" }})
        fireEvent.change(passwordElement, { target: { value: "pass" }})
        fireEvent.click(registerButton)
        const alertEle = await screen.findByRole("alert")
        expect(alertEle).toHaveTextContent(/User created/i)
    })
})